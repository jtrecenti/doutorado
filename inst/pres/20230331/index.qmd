---
title: "Captchas"
subtitle: "(esqueleto)"
author: "Julio Trecenti"
format: 
  revealjs:
    slide-number: true
---

## Resumo

::: {.incremental}

- Ninguém gosta de Captchas
- Criamos uma nova técnica para resolvê-los! 
- Construímos o __WAWL__, que une técnicas __raspagem de dados__ e __aprendizado fracamente supervisionado__
- A técnica baixa dados da internet, classificados automaticamente pelo __oráculo__
- Os resultados são bons!
- E mais! Criamos um novo pacote em R, bases de dados públicas e modelos para incentivar a pesquisa na área!

:::

::: {.notes}

- o que é?
- problemas do captcha em serviços públicos
    - menos importância
- luta de geradores e resolvedores
    - menos importância
- o oráculo
- objetivos
- contribuições
- teoria
    - redes neurais
    - aprendizado fracamente supervisionado
    - o método wawl
    - a função de perda
- simulação
    - passo 1: modelos iniciais
    - passo 2: dados
    - passo 3: modelos aprimorados
- resultados
    - resultados da simulação
    - pacote captcha
- conclusões
- próximos passos
- limitações

:::

# Motivação

## O que é Captcha?

- Desafio para identificar humanos e robôs
- Criado em 2002 em Carnegie Mellon
- O desafio deve ser fácil de resolver para humanos, mas difícil para máquinas
- É uma variação do teste de Turing, sendo que a avaliação da humanidade é feita pelo robô

TODO: Imagem de um Captcha, se possível engraçada

## Para que eles servem?

- Evitar SPAM
- Evitar criação de contas falsas
- Bloquear envio automático de mensagens
- Impedir operações e consultas automatizadas

## Quais são os tipos de Captcha?

- Audio
- Texto em imagem
- Padrão em imagem
- Miscelânea

TODO: Imagens dos tipos de Captcha

Nosso foco é o de __texto em imagem__, porque é um dos mais utilizados em serviços públicos.

## Uso indevido em serviços públicos

- A Constituição Federal e Lei de Acesso à Informação (LAI) garantem acesso a informações públicas
- Problemas da LAI: esforço e formato dos dados. 
- Solução: disponibilizar dados de forma aberta

TODO: Imagem da OKFN sobre open data

## Judiciário e dados abertos

- Os dados são públicos, mas não são abertos
- Boa parte dos tribunais possuem Captchas
- Dificulta a atividade fim da Associação Brasileira de Jurimetria (ABJ)
- Tribunais dificilmente respondem a pedidos de LAI
- Raspagem de dados é a única alternativa

## O mercado de Captcha explora pessoas

- __Captchas ~~impedem~~ especializam o acesso automatizado__
- É possível passar a imagem do Captcha para outra pessoa resolver...

TODO diagrama de funcionamento dessas ferramentas

::: {.fragment}

__Exemplo__: 2Captcha

- Pagamento: US$ 0,5 por 1 a 2 horas de trabalho
- Salário mensal em jornada 8h/22d: US$ 55 a 110. 
- Ou seja, menos de R\$ 600 reais por mês!

TODO gráfico comparando salário mínimo e 2Captcha

:::

## Resolver Captchas é bom para a ciência

- Captcha e inteligência artificial estão conectados
- Quando se resolvem Captchas, a ciência se desenvolve

<!-- ---------------------------------------------- -->

# Estado da arte

## Uma luta de geradores e resolvedores

::: {.notes}
- Luta entre geradores e resolvedores
- Avanços em inteligência artificial e processamento de imagens
- Redes neurais como ferramentas úteis para resolver Captchas
- reCaptcha v1: digitalização de livros
- reCaptcha v2: identificação de objetos e animais
- Artigo da Google
- reCaptcha v3: verificação ativa do agente, foco em padrões de acesso
:::

TODO linha do tempo com Captchas

## A luta acabou, mas os Captchas não

- Captchas praticamente não são mais necessários
- Ninguém venceu a luta; ela mudou de foco para verificação ativa
- Captchas se tornaram obsoletos, servindo principalmente para
    - Pesquisa científica em inteligência artificial
    - Atrapalhar a vida de quem faz pesquisa com dados públicos

## Desafios atuais de pesquisa

- Reduzir a quantidade anotações necessárias para resolver um Captcha
- Criar resolvedores de Captcha universais
- Abordagens recentes: redes generativas adversariais (GANs) e similares
- Trabalhos recentes: @ye2018; @wang2021

<!-- ---------------------------------------------- -->

# Uma nova abordagem

## A oportunidade

- Quando preenchemos um Captcha no site, ele diz para nós se acertamos o rótulo ou não
- Mas a informação é limitada: o site só diz de acertamos ou erramos.
- É como um __oráculo__, que sempre nos diz verdade, mas de forma incompleta.

TODO imagem oráculo de Delphos ou Matrix

## O que é oráculo?

TODO gif

- Conceito de oráculo: resposta do site sobre acerto/erro
- Oráculos existem em todos os sites com Captchas, por construção
- Podem fornecer mais ou menos informação, dependendo da __quantidade de chutes__ permitida para um mesmo Captcha

## Nossa solução

- Técnica proposta: Web Automatic Weak Learning (WAWL)
- Obtém novos dados automaticamente
- Combina raspagem de dados e aprendizado fracamente supervisionado

TODO WAWL-e

## Como funciona?

TODO Diagrama: Modelo inicial -> novos dados -> modelo final

## Vantagens do WAWL

- Aproveita os recursos disponíveis: base de dados virtualmente infinita
- Fácil de implementar: só precisa de uma mudança na função de perda
- Depende de um raspador, mas tempo de desenvolvimento é negligenciável devido à necessidade de construí-los na prática

## Objetivo

::: {style="margin-top: 200px; font-size: 1em; color: royalblue;"}
Desenvolver um método __inovador__, chamado WAWL (*Web Automatic Weak Learning*) para resolver Captchas, misturando técnicas de __aprendizado profundo__ com __raspagem de dados__ e aproveitando os dados fornecidos pelo oráculo.
:::

## Objetivos específicos

1.  Descrever o método proposto e estudar suas características.
2.  Construir e disponibilizar um repositório de dados para realização de mais pesquisas no ramo.
3.  Ajustar modelos e testar a eficácia do método.
4.  Disponibilizar um pacote computacional aberto que possibilita a implementação de soluções para resolver Captchas presentes em serviços públicos.

## Hipóteses

1. A utilização do WAWL gera modelos que resolvem Captchas de textos em imagens sem a necessidade de criar grandes bases anotadas.

2. É possível aliar a área de raspagem de dados com a área de modelagem estatística.

## Contribuições

::: {.r-stack}

::: {.fragment .fade-in-then-out}

### Pesquisa

- União entre áreas de aprendizado de máquinas e raspagem de dados
- Aplicação inovadora do aprendizado fracamente supervisionado com base potencialmente infinita

:::

::: {.fragment .fade-in-then-out}

### Aplicações

- O WAWL traz bons resultados empíricos
- Novos modelos disponíveis
- Destravamos algumas pesquisas aplicada no Brasil
    
:::

::: {.fragment .fade-in}

### Sociedade

- Novo pacote `{captcha}` disponível para comunidade
- Novas bases de dados disponíveis
- Desincentivo aos mercados

:::

:::


## Arquitetura da rede neural

```{r}
#| label: fig-diagrama-modelo-cnn
#| fig-cap: "Diagrama representando o modelo utilizado de forma genérica, com todos os componentes e subcomponentes apresentados de forma esquemática"
knitr::include_graphics("assets/img/diagrama-modelo-cnn.png")
```

## Adaptação da função de perda

- Função de perda adaptada para informação limitada do oráculo
- Considera rótulos corretos e incorretos

## Função de perda proposta

$$\mathcal L(g(\mathbf x), {\mathbf y}) = -\log\left[1 - \sum_{y \in \mathcal A} {g_y}(\mathbf x) I(y\notin {\mathbf y})\right]$$
- Função indicadora para rótulos fora do conjunto observado

## Exemplo 1

Rótulo incorreto com alta probabilidade

- Rede neural retorna 0.99 para rótulo incorreto $j$
- Função de perda: 

$$\mathcal L(g(\mathbf x), \{1,\dots,10\}\setminus \{j\}) = -\log\left[1-{g_j}(\mathbf x)\right] = -\log\left[1-0.99 \right] = 4.61$$

- Penalização maior para predição incorreta

## Exemplo 2

Rótulo incorreto com alta probabilidade

- Rede neural retorna 0.01 para rótulo incorreto $k$
- Função de perda: 

$$\mathcal L(g(\mathbf x), \{1,\dots,10\}\setminus \{k\}) = -\log\left[1-{g_k}(\mathbf x)\right] = -\log\left[1-0.01 \right] = 0.01$$

- Penalização menor para predição menos provável

## Aprendizado fracamente supervisionado

TODO imagem com tipos de aprendizado fracamente supervisionado

- Aprendizado com dados parcialmente rotulados (PLL): parte da base anotada sem erros, parte com lista de rótulos possíveis.
- Rótulos parciais: lista de possíveis valores para $y$, incluindo o correto.
- Rótulos complementares: a lista de possíveis valores inclui todos os valores menos 1. No nosso caso, a tentativa errada que vem do oráculo.

## Como demonstrar que uma solução funciona?

- Passo-a-passo: escrever distribuição dos dados, reescrever função de risco, criar estimador e demonstrar convergência

- A partir da distribuição dos dados, reescreve-se a função de risco do problema completamente supervisionado em termos do problema de rótulos parciais.

## Como demonstrar que uma solução funciona?

- Considerando que $f^*$ é a função obtida em um problema completamente supervisionado, $\hat{f}$ é a função obtida no problema com rótulos parciais e seguindo algumas suposições adicionais, demonstra-se que 

$$|\mathcal R(\hat f) - \mathcal R(f^*)|$$

é limitada e converge para zero quando tamanho da amostra vai para infinito. Geralmente, utiliza-se a teoria de complexidade de Rademacher na demonstração.

## Situação atual

- Os trabalhos existentes demonstram convergência independentemente da função de perda (sob certas suposições), para algumas distribuições específicas dos dados rotulados parcialmente.

- Também existem demonstrações para funções de perda específicas (diferentes da nossa), que independem da distribuição dos dados. No entanto, essas soluções envolvem apenas rótulos complementares, não rótulos complementares múltiplos. 

## Situação atual

- Até o momento, não existe uma demonstração que aborde exatamente os dados da metodologia WAWL. No entanto, a função de perda proposta é bastante natural e provavelmente é uma adaptação de @yu2018.

- Adicionalmente, o fato de observarmos rótulos complementares múltiplos tende a proporcionar resultados melhores, já que nesse caso temos mais informação.

# Dados

## Critérios para seleção de Captchas:

- Serviço público (governo federal, tribunal, etc.)
- Letras (A-Z) e números (0-9) em imagem `jpeg` ou `png`
- Comprimento fixo

## Lista dos Captchas

|Nome   |Exemplo             |Descrição                                         |Acurácia |
|:------|:-------------------|:---------------------------------------------------|:--------|
|cadesp |![cadesp](assets/img/dados_cadesp.jpg){height=80px}|Centro de Apoio ao Desenvolvimento da Saude Publica |96.37%   |
|esaj   |![esaj](assets/img/dados_esaj.png){height=80px}|Tribunal de Justica da Bahia                        |94.50%   |
|jucesp |![jucesp](assets/img/dados_jucesp.jpg){height=80px}|Junta Comercial de Sao Paulo                        |89.88%   |
|rfb    |![rfb](assets/img/dados_rfb.png){height=80px}|Receita Federal                                     |95.70%   |
|sei    |![sei](assets/img/dados_sei.png){height=80px}|Sistema Eletronico de Informacoes - ME              |77.25%   |
|tjmg   |![tjmg](assets/img/dados_tjmg.jpeg){height=80px}|Tribunal de Justica de Minas Gerais                 |98.35%   |
|tjpe   |![tjpe](assets/img/dados_tjpe.png){height=80px}|Tribunal de Justica de Pernambuco                   |91.88%   |
|tjrs   |![tjrs](assets/img/dados_tjrs.jpg){height=80px}|Tribunal de Justica do Rio Grande do Sul            |99.57%   |
|trf5   |![trf5](assets/img/dados_trf5.jpg){height=80px}|Tribunal Regional Federal 5                         |98.77%   |
|trt    |![trt](assets/img/dados_trt.jpeg){height=80px}|Tribunal Regional do Trabalho 3                     |98.50%   |


## Uso de Captchas artificiais:

- Facilita testes e simulações
- Evita necessidade de acesso à internet e construção de bases de dados específicas

```{r}
#| label: fig-captcha-r-exemplo
#| fig-cap: Exemplo de captcha gerado pela função `captcha::captcha_generate()`
#| out-width: 150px
set.seed(5)
gen <- captcha::captcha_generate()
gen$lab <- NULL
plot(gen)
```   
   
## Raspagem de dados

```{r}
#| label: fig-fluxo-web-scraping
#| fig-cap: "Ciclo da raspagem de dados. Fonte: [curso de Web Scraping da Curso-R](https://curso-r.github.io/main-web-scraping)."
#| out-width: 80%

knitr::include_graphics("assets/img/cycle.png")
```

## Bases disponíveis!

- As bases de dados com imagens anotadas foram disponibilizadas na aba de lançamentos (*releases*) do [repositório principal do projeto de pesquisa](https://github.com/decryptr/captcha/releases). 

- As bases e modelos ajustados estão disponíveis para quem tiver interesse em fazer novas pesquisas e utilizar os resultados em suas aplicações.

# Simulação

## Passo 1: Modelo Inicial

- __Objetivo__: Obter modelos preditivos de Captchas com diferentes acurácias
- Construção de 10 amostras de dados com subconjuntos das bases completas
- Aplicação de 27 modelos com diferentes hiperparâmetros
- Seleção do melhor modelo para cada tamanho de amostra

## Passo 2: Dados

- __Objetivo__: Construir bases de dados utilizando o oráculo
- Filtro de modelos com acurácia entre 5% e 50%
- Definição do tamanho da base a ser obtida
- Coleta de imagens com diferentes quantidades de tentativas (1, 5 e 10)
- Construção de bases de teste com 1000 imagens para cada Captcha

## Passo 3: Modelo Final

- __Objetivo__: Ajustar modelo final para as 65 bases de treino disponíveis
- Modificação da função de perda do modelo
- Busca de hiperparâmetros e ajuste de 9 modelos para cada base de dados
- Seleção dos classificadores com melhor acurácia
- Comparação de acurácias iniciais e finais através de gráficos de barras e dispersão

## Experimentos adicionais

- Aplicação iterativa da técnica do oráculo para verificar melhorias contínuas
- Aprendizado online: incorporação do download de dados dentro da construção do *minibatch*
- Disponibilização das bases de dados para futuras pesquisas e testes de outras arquiteturas de redes neurais

# Resultados

## Resultado geral

```{r}
#| echo: false
total_sim <- doutorado::da_results_simulacao |> 
  dplyr::distinct(captcha, n, ntry) |> 
  nrow()

ganho_medio <- doutorado::da_results_simulacao |> 
  dplyr::select(-model) |> 
  tidyr::pivot_wider(names_from = fase, values_from = acc) |> 
  with(mean(oraculo / inicial)) |> 
  scales::percent()

ganho_absoluto <- doutorado::da_results_simulacao |> 
  dplyr::select(-model) |> 
  tidyr::pivot_wider(names_from = fase, values_from = acc) |> 
  with(mean(oraculo - inicial)) |> 
  scales::percent()
```


- Total de simulações[^1]: `r total_sim`
- Variação: tipo de Captcha, acurácia do modelo inicial, tentativas no oráculo

- Ganho médio: `r ganho_medio`: mais de 3 vezes a acurácia do modelo inicial.
- Ganho absoluto: `r ganho_absoluto`. Aumento médio na acurácia de 33%.

[^1]: Base de dados: [Repositório da tese](https://github.com/jtrecenti/doutorado). Contém: Captcha ajustado, observações do modelo inicial, tentativas do oráculo, etapa de simulação, caminho do modelo ajustado, acurácia obtida

## Resultados por Captcha

::: {.r-stack}

::: {.fragment .fade-out}

```{r}
#| label: fig-simulacao-captcha
#| fig-width: 8
#| fig-height: 5
#| out-width: 100%
#| fig-cap: "Resultados da simulação por captcha, quantidade de tentativas e modelo inicial."

doutorado::da_results_simulacao |>
  dplyr::select(-model) |>
  dplyr::mutate(ntry2 = dplyr::case_when(
    ntry == "01" ~ "Apenas 1",
    TRUE ~ "Mais de 1"
  )) |>
  tidyr::pivot_wider(names_from = fase, values_from = acc) |> 
  dplyr::group_by(captcha, ntry) |> 
  dplyr::mutate(inicial_cut = cut(
    inicial, c(0, .1, .35, .6),
    labels = c("Até 10%", "Entre 10% e 35%", "Mais de 35%")
  )) |> 
  dplyr::rename(wawl = oraculo) |> 
  tidyr::pivot_longer(
    c(inicial, wawl), 
    names_to = "fase", 
    values_to = "acc"
  ) |> 
  ggplot2::ggplot(ggplot2::aes(
    x = fase, y = acc,
    colour = inicial_cut,
    linetype = ntry2,
    group = paste(captcha, n, ntry))
  ) +
  ggplot2::geom_point() +
  ggplot2::geom_line() +
  ggplot2::scale_colour_viridis_d(begin = .2, end = .8, option = "A") +
  ggplot2::scale_y_continuous(labels = scales::percent) +
  ggplot2::facet_wrap(~captcha) +
  ggthemes::theme_hc(base_size = 13) +
  ggplot2::labs(
    x = "Técnica",
    y = "Acurácia",
    colour = "Modelo inicial",
    linetype = "# Tentativas"
  ) +
  ggplot2::theme(
    legend.position = "right"
  )
```

:::

::: {.fragment .fade-in}
- Modelos com mais tentativas apresentam maiores ganhos
- Acurácia inicial de até 10%: ganhos menores com apenas um chute
- Interação entre quantidade de chutes e acurácia do modelo inicial
:::

:::

## Conclusões sobre o Método WAWL

- Resultados expressivos e consistentes
- Aproveita oportunidade de feedback oráculo múltiplo
- Aplicação possível para modelos iniciais fracos (acurácia até 10%)
- Factível para bases pequenas ou modelos generalistas

## Aplicação iterada

A utilização da técnica não só funcionou como levou o modelo a uma acurácia de 100%.

```{r}
#| label: fig-aplicacao-iterada
#| fig-cap: "Resultados da aplicação iterativa do WAWL"
#| fig-width: 7
#| fig-height: 4
#| out-width: 85%

dados_iteracao_trf5 <- tibble::tribble(
  ~n, ~ntry,         ~tempo,              ~acc,
  "00101",  "01",    "acc_antes", 0.238095238095238,
  "00101",  "01", "acc_oraculo1",             0.705,
  "00101",  "01", "acc_oraculo2",                 1
)

dados_iteracao_trf5 |> 
  ggplot2::ggplot(ggplot2::aes(x = tempo, y = acc)) +
  ggplot2::geom_col(fill = viridis::viridis(2,.9,.3,.7,1,"A")[1], width = .5) +
  ggplot2::scale_y_continuous(labels = scales::percent) +
  ggplot2::scale_x_discrete(
    labels = c(
      "Modelo Inicial\n(n=100)", 
      "Primeira iteração\ndo WAWL\n(n=1000)", 
      "Segunda iteração\ndo WAWL\n(n=2000)"
    )
  ) +
  ggplot2::labs(
    x = "",
    y = "Acurácia"
  ) +
  ggplot2::theme_minimal(14)

```

O resultado sugere que o método WAWL pode ser aplicado iterativamente para aprimorar o aprendizado do modelo.

## Aprendizado online

- Integração direta da raspagem de dados no ciclo de aprendizagem
- Modelo, função de perda e base de testes idênticos à simulação completa
- Minibatch construído baixando dados diretamente da internet
- Probabilidade de 80% para baixar novos casos
- Minibatch de 40 observações
- Época definida como 2 minibatches

## Aprendizado online

A partir do modelo inicial 11% de acurácia, após 100 épocas, o modelo baixou 6391 imagens e chegou em uma acurácia de 87% na base de teste.  

```{r}
#| label: fig-online-learning
#| fig-cap: "Resultados do experimento com aprendizado online"
#| fig-width: 7
#| fig-height: 4
#| out-width: 80%
doutorado::da_online |> 
  ggplot2::ggplot() +
  ggplot2::aes(x = epoch, y = captcha.acc) +
  ggplot2::geom_hline(
    yintercept = max(doutorado::da_online$captcha.acc),
    colour = "purple", linetype = 2
  ) +
  ggplot2::geom_line(linewidth = 1.3) +
  ggplot2::geom_point(alpha = .8) +
  ggthemes::theme_hc(14) +
  ggplot2::scale_y_continuous(labels = scales::percent, limits = c(0,1)) +
  ggplot2::scale_x_continuous(limits = c(0, 104)) +
  ggplot2::labs(x = "Época", y = "Acurácia (base de validação)") +
  ggplot2::annotate(
    "text",
    x = 100,
    y = max(doutorado::da_online$captcha.acc),
    label = scales::percent(max(doutorado::da_online$captcha.acc)),
    vjust = -.4,
    hjust = -.1,
    size = 3.5,
    colour = "purple"
  )
```

Como as épocas são relativamente curtas (apenas 80 observações), o ganho em acurácia é pequeno e apresenta variabilidade.

# Pacote `{captcha}`

## Utilização do pacote

```{mermaid}
%%| label: fig-diagrama-captcha-simples
%%| fig-cap: Diagrama das funções básicas do pacote `{captcha}`
%%| out-width: 100%
%%| fig-align: center
flowchart LR
  B("<b><span style='color:blue;'>captcha</span></b> <- <b>read_captcha</b>('path/to/file.png')")
  B --> C("<b>plot</b>(<b><span style='color:blue;'>captcha</span></b>)")
  B --> D("<b>captcha_annotate</b>(<b><span style='color:blue;'>captcha</span></b>)")
  B --> F("<b>decrypt</b>(<b><span style='color:blue;'>captcha</span></b>, <b><span style='color:green;'>model</span></b>)")  
  G("<b><span style='color:green;'>model</span></b> <- <b>captcha_load_model</b>('model_name')") --> F
style B fill:#d3ddf1,stroke:#333,stroke-width:2px
```

## Resolvendo novos Captchas

## Discussão

- Método WAWL: Resultados empíricos positivos
- Conexão entre raspagem de dados e modelagem estatística
- Ineditismo da abordagem: Raspagem de dados no processo de aprendizado
- Ensino de estatística: Disciplinas optativas de raspagem de dados
- Pacotes desenvolvidos: `{captcha}`, `{captchaDownload}` e `{captchaOracle}`
- Reprodutibilidade da pesquisa
- Códigos, dados e resultados disponíveis no GitHub
- Base para pesquisas futuras

# Conclusões

## Pesquisa bibliográfica

- Histórico dos Captchas
- Uso em serviços públicos
- Incentivo para mão de obra precária

## Avanço metodológico

- Método WAWL
- Raspagem de dados
- Aprendizado estatístico com rótulos parciais
- Aumento de acurácia sem anotação manual

## Resultados Empíricos

- Acurácia dos modelos iniciais aumentada em 3x
- Possibilidade de aplicação iterativa para maior poder preditivo
- Possibilidade de aplicação de aprendizado online

## Resumo das contribuições

::: {.r-stack}

::: {.fragment .fade-in-then-out}
__Pesquisa acadêmica__

- Aprendizado com rótulos parciais
- Raspagem de dados em estatística
- Exploração de oráculos
:::

::: {.fragment .fade-in-then-out}

__Comunidade de programação__

- Pacote `{captcha}`
- Disponibilização de dados e modelos

:::

::: {.fragment .fade-in-then-out}
__Sociedade em geral__

- Quebra de incentivo nefasto
- Impacto positivo nas relações de trabalho
:::

:::

## Próximos passos

::: {.fragment}

__Aprimoramentos__

- Resultados matemáticos mais robustos
- Estudo mais completo da aplicação iterada
- Estudo mais completo do aprendizado online

:::

::: {.fragment}

__Extensões__

- Modelo geral de resolução de Captchas 
- Integração com GPT-4?

:::

# Obrigado!

