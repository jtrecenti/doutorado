---
title: "Resolvendo Captchas"
subtitle: "usando Raspagem de Dados e Aprendizado Fracamente Supervisionado"
author: 
  - name: "Julio Trecenti"
    orcid: 0000-0002-1680-6389
  - name: "Orientador: Victor Fossaluza"
    orcid: 0000-0002-9328-0210
institute: 
  - "Instituto de Matemática e Estatística"
  - "Universidade de São Paulo"
title-slide-attributes: 
  data-background-image: "./assets/img/walle-capa.jpg"
  data-background-opacity: "0.2"
  data-background-size: "fill"
lang: pt
format: 
  revealjs:
    slide-number: true
    theme: ["assets/css/styles.scss"]
    bibliography: "assets/bib/captcha.bib"
    
---


## Resumo

::: {.incremental}

- [ ] Queremos resolver Captchas: <img src="assets/img/dados_tjrs.jpg" style='margin:0px;margin: 0px 0px -15px 0px;'> -> `"1158"`
- [ ] Criamos uma nova técnica para isso!
- [ ] A proposta une conceitos de __raspagem de dados__ e __aprendizado fracamente supervisionado__
- [ ] A técnica baixa dados da internet e usa os dados para treinar o modelo
- [ ] Os resultados são bons!
- [ ] Criamos um [novo pacote em R](https://github.com/decryptr/captcha), bases de dados públicas e modelos para incentivar pesquisas na área!

:::

```{r}
#| echo: false
type <- "hidden"
```


::: {.notes}

- o que é?
- problemas do captcha em serviços públicos
    - menos importância
- luta de geradores e resolvedores
    - menos importância
- o oráculo
- objetivos
- contribuições
- teoria
    - redes neurais
    - aprendizado fracamente supervisionado
    - o método wawl
    - a função de perda
- simulação
    - passo 1: modelos iniciais
    - passo 2: dados
    - passo 3: modelos aprimorados
- resultados
    - resultados da simulação
    - pacote captcha
- conclusões
- próximos passos
- limitações

:::

# Motivação {background-image="./assets/img/dados_tjmg.jpeg" background-size="200px" background-repeat="repeat" background-opacity="0.1" visibility="uncounted"}

## O que é Captcha?

- *Completely Automated Public Turing Test to Tell Computers and Humans Apart*
- O desafio deve ser fácil de resolver para humanos, mas difícil para máquinas
- Criado em 2002 em Carnegie Mellon
- É uma variação do teste de Turing: a avaliação da humanidade é feita pelo robô

Nosso foco está em Captchas de __texto em imagem__, porque é um dos mais utilizados em serviços públicos.

![](assets/img/captcha.gif){fig-align="center"}

## Para que eles servem? {visibility='`r type`'}

- Evitar SPAM
- Evitar criação de contas falsas
- Bloquear envio automático de mensagens
- Impedir operações e consultas automatizadas
- reCaptcha: usado para digitalizar livros!

![](assets/img/recaptcha-example.gif){fig-align="center"}


## Captchas impedem transparência ativa

- Transparência passiva: pedidos de Lei de Acesso à Informação (LAI)
- Transparência ativa: dados abertos

<br/>

:::{.fragment .fade-in}

### Judiciário e dados abertos

- Os dados são públicos, mas não são abertos
- Muitos sites de tribunais possuem Captchas
- Dificulta a atividade fim da [Associação Brasileira de Jurimetria (ABJ)](https://abj.org.br)
- Tribunais dificilmente respondem a pedidos de LAI
- Raspagem de dados é a __única alternativa__

:::

## {auto-animate=true}

<br/>

### O mercado de Captcha explora pessoas

- __Captchas ~~impedem~~ especializam o acesso automatizado__
- É possível passar a imagem do Captcha para outra pessoa resolver...

![[Fonte: F5](https://www.f5.com/labs/articles/cisotociso/i-was-a-human-captcha-solver)](assets/img/2captcha.gif){width=60%}

## {auto-animate=true}

<br/>

### O mercado de Captcha explora pessoas

- __Captchas ~~impedem~~ especializam o acesso automatizado__
- É possível passar a imagem do Captcha para outra pessoa resolver...

### Resolver Captchas é bom para a ciência

- Captcha e inteligência artificial estão conectados
- Quando se resolvem Captchas, a ciência se desenvolve


<!-- ---------------------------------------------- -->

# Estado da arte {background-image="./assets/img/dados_tjmg.jpeg" background-size="200px" background-repeat="repeat" background-opacity="0.1" visibility="uncounted"}

## Uma luta de geradores e resolvedores

::: {.notes}
- Luta entre geradores e resolvedores
- Avanços em inteligência artificial e processamento de imagens
- Redes neurais como ferramentas úteis para resolver Captchas
- reCaptcha v1: digitalização de livros
- reCaptcha v2: identificação de objetos e animais
- Artigo da Google
- reCaptcha v3: verificação ativa do agente, foco em padrões de acesso
:::


```{r}
#| out-width: 100%
#| out-height: 800px
library(timevis)
tibble::tribble(
  ~id,                                     ~content, ~start, ~end,
    1,                            "Criação<br/>do site",   "2000-01-01", NA,
    2,                                "Tech. report",   "2002-01-01",   NA,
    3,                              "Paper original",   "2003-01-01",   NA,
    4,                        "Primeiro resolvedor",   "2003-01-01",   NA,
    5,                 "Aplicação de<br/>redes neurais",   "2004-01-01",   NA,
    6,                               "reCaptcha V1",   "2008-01-01", NA,
    7,             "reCaptcha comprada<br/>pela Google",   "2009-01-01",   NA,
    8, "resolvendo reCaptcha V1<br/>com 99,8% de acurácia",   "2013-01-01",   NA,
    9,                               "reCaptcha V2",   "2014-01-01", NA,
   10,                    "resolvendo<br/>reCaptcha V2",   "2017-01-01",   NA,
   11,                               "reCaptcha V3<br/>(fim da necessidade<br/>de usar Captchas)",   "2018-01-01", NA
  ) |> 
  dplyr::mutate(
    style = paste0(
      "font-size: .7em;background-color:", 
      c(rep("lightblue", 5), "lightgreen", "lightblue", "lightblue",
        "lightgreen", "lightblue", "lightgreen")
    ),
    # type = c(rep("box", 5), "range", "box", "box", "range", "box", "range"),
    # group = c(rep(2, 5), 1, 2, 2, 1, 2, 1)
  ) |> 
timevis::timevis(
  height = 500
)
```


## A luta acabou, mas os Captchas não {visibility='`r type`'}

- Captchas praticamente __não são necessários__ nos dias de hoje
- Ninguém venceu a luta; ela mudou de foco para __verificação ativa__
- Captchas se tornaram obsoletos, servindo principalmente para:
    - Pesquisa científica em inteligência artificial
    - Atrapalhar a vida de quem faz pesquisa com dados públicos

## Desafios atuais de pesquisa

- __Reduzir__ a quantidade __anotações necessárias__ para resolver um Captcha
- Criar __resolvedores__ de Captcha __universais__
- Abordagens recentes: redes generativas adversariais (GANs) e similares
- Trabalhos recentes: @yeAnotherTextCaptcha2018; @wangMakeComplexCaptchas2021.

<!-- ---------------------------------------------- -->

# Nova abordagem {background-image="./assets/img/dados_tjmg.jpeg" background-size="200px" background-repeat="repeat" background-opacity="0.1" visibility="uncounted"}

## Objetivo {auto-animate=true}

::: {style="margin-top: 200px; font-size: 1.3em; color: royalblue;"}
Desenvolver um método __inovador__, chamado WAWL (*Web Automatic Weak Learning*) para resolver Captchas, misturando técnicas de __aprendizado fracamente supervisionado__ com __raspagem de dados__.
:::

## Objetivos específicos {auto-animate=true}

Desenvolver um método __inovador__, chamado WAWL (*Web Automatic Weak Learning*) para resolver Captchas, misturando técnicas de __aprendizado fracamente supervisionado__ com __raspagem de dados__.

1.  Descrever o método proposto e estudar suas características.
2.  Construir e disponibilizar um repositório de dados para realização de mais pesquisas no ramo.
3.  Ajustar modelos e testar a eficácia do método.
4.  Disponibilizar um pacote computacional aberto que possibilita a implementação de soluções para resolver Captchas presentes em serviços públicos.

## Contribuições {.center .center-x}

:::{.columns}

:::{.column width="33%" .incremental}

### Pesquisa

- União entre áreas de aprendizado de máquinas e raspagem de dados
- Aplicação inovadora do aprendizado fracamente supervisionado com base potencialmente infinita

:::

:::{.column width="33%" .incremental}

### Aplicações

- O WAWL traz bons resultados empíricos
- Novos modelos disponíveis
- Facilitamos pesquisas aplicadas no Brasil


:::

:::{.column width="33%" .incremental}

### Sociedade

- Novo pacote `{captcha}` disponível para comunidade
- Novas bases de dados disponíveis
- Desincentivo aos mercados que exploram pessoas


:::

:::

## Oráculo: a oportunidade

- Quando preenchemos um Captcha no site, ele nos diz se acertamos ou não
- Mas a informação é limitada: o site só diz de __acertamos__ ou __erramos__.
- É como um __oráculo__, que sempre nos diz verdade, mas de forma incompleta.

:::{width="80%"}

![Fonte: The Matrix](assets/img/cookie.gif){fig-align="center" width="50%"}

:::

## O que é oráculo? {visibility='`r type`'}

![](assets/img/esquema-oraculo.png){fig-align="center"}

- Conceito de oráculo: resposta do site sobre acerto/erro
- Oráculos existem em __todos__ os sites com Captchas
- Podem permitir __vários chutes__ para um mesmo Captcha

## Nossa solução {background-image="./assets/img/walle.webp" background-opacity="0.2" .center .center-x}

::: {style="margin-top: 200px; font-size: 1.4em"}

__Web Automatic Weak Learning (WAWL)__

- Parte de um modelo inicial

- Obtém novos dados automaticamente

- Atualiza o modelo

:::

## Como funciona?

![](assets/img/wawl.png){fig-align="center"}

- __Modelo inicial__: pode ser ajustado com uma pequena base completamente anotada ou pode ser um super-modelo generalista.

## Vantagens do WAWL

- Aproveita os recursos disponíveis: __base de dados__ virtualmente __infinita__
- Fácil de implementar: só precisa de uma __mudança na função de perda__
- __Depende de um raspador__, cujo tempo de desenvolvimento é __negligenciável__ devido à necessidade de construí-los na prática

## Arquitetura da rede neural {visibility='`r type`'}

```{r}
#| label: fig-diagrama-modelo-cnn
#| fig-cap: "Diagrama representando o modelo utilizado de forma genérica, com todos os componentes e subcomponentes apresentados de forma esquemática"
knitr::include_graphics("assets/img/diagrama-modelo-cnn.png")
```

## Adaptação da função de perda

- Função de perda adaptada para informação limitada do oráculo

$$\mathcal L(g(\mathbf x), {\mathbf y}) = -\log\left[1 - \sum_{y \in \mathcal A} {g_y}(\mathbf x) I(y\notin {\mathbf y})\right]$$

- Quando a informação é __completa__, utilizamos a função de __perda original__.  
- Quando a informação é __parcial__, a __perda é maior__ quando o modelo dá alta probabilidade para um __rótulo incorreto__.

## Exemplo {visibility='`r type`'}

:::{.fragment}
Rótulo incorreto com __alta__ probabilidade

- Rede neural retorna 0.99 para rótulo incorreto $j$

$$\mathcal L(g(\mathbf x), \{1,\dots,10\}\setminus \{j\}) = -\log\left[1-{g_j}(\mathbf x)\right] = -\log\left[1-0.99 \right] = 4.61$$

- Penalização __maior__ para predição incorreta

:::

<hr/>

:::{.fragment}
Rótulo incorreto com __baixa__ probabilidade

- Rede neural retorna 0.01 para rótulo incorreto $k$

$$\mathcal L(g(\mathbf x), \{1,\dots,10\}\setminus \{k\}) = -\log\left[1-{g_k}(\mathbf x)\right] = -\log\left[1-0.01 \right] = 0.01$$

- Penalização menor para predição menos provável

:::

## Aprendizado fracamente supervisionado {visibility='`r type`'}

Generalização do aprendizado estatístico: contempla aprendizado supervisionado, aprendizado semi-supervisionado e vários tipos de supervisão fraca (rótulos incorretos, rótulos incompletos, etc) e sem supervisão.

:::{}
![Exemplo de supervisor fraco](assets/img/office.gif)
:::

- __Nosso caso__: Aprendizado com dados parcialmente rotulados (PLL): parte da base anotada sem erros, parte com lista de rótulos possíveis.

- __Rótulos parciais__: lista de possíveis valores para $y$, incluindo o correto.

- __Rótulos complementares__: a lista de possíveis valores inclui todos os valores menos 1. No nosso caso, a tentativa errada que vem do oráculo.

## Como demonstrar que funciona? {visibility='`r type`'}

- __Passo-a-passo__: escrever distribuição dos dados, reescrever função de risco, criar estimador e demonstrar convergência

- A partir da distribuição dos dados, reescreve-se a função de risco do problema completamente supervisionado em termos do problema de rótulos parciais.

- Considerando que $f^*$ é a função obtida em um problema completamente supervisionado, $\hat{f}$ é a função obtida no problema com rótulos parciais e seguindo algumas suposições adicionais, demonstra-se que 

$$|\mathcal R(\hat f) - \mathcal R(f^*)|$$

é limitada e converge para zero quando tamanho da amostra vai para infinito. Geralmente, utiliza-se a *teoria de complexidade de Rademacher* na demonstração [@fengProvablyConsistentPartiallabel2020].

## Situação atual {visibility='`r type`'}

- Os trabalhos existentes demonstram convergência independentemente da função de perda (sob certas suposições), para algumas distribuições específicas dos dados rotulados parcialmente.

- Também existem demonstrações para funções de perda específicas (diferentes da nossa), que independem da distribuição dos dados. No entanto, essas soluções envolvem apenas rótulos complementares, não rótulos complementares múltiplos. 

- Até o momento, não existe uma demonstração que aborde exatamente os dados da metodologia WAWL. No entanto, a função de perda proposta é bastante natural e pode ser adaptada de @yuLearningBiasedComplementary2018.

- Adicionalmente, o fato de observarmos rótulos complementares múltiplos tende a proporcionar resultados melhores, já que nesse caso temos mais informação.

# Simulação {background-image="./assets/img/dados_tjmg.jpeg" background-size="200px" background-repeat="repeat" background-opacity="0.1" visibility="uncounted"}

## Lista de Captchas {.scrollable}

|Nome   |Exemplo             |Descrição                                         
|:------|:-------------------|:---------------------------------------------------|
|cadesp |![cadesp](assets/img/dados_cadesp.jpg){height=80px}|Centro de Apoio ao Desenvolvimento da Saude Publica |
|esaj   |![esaj](assets/img/dados_esaj.png){height=80px}|Tribunal de Justica da Bahia                        |
|jucesp |![jucesp](assets/img/dados_jucesp.jpg){height=80px}|Junta Comercial de Sao Paulo                        |
|rfb    |![rfb](assets/img/dados_rfb.png){height=80px}|Receita Federal                                     |
|sei    |![sei](assets/img/dados_sei.png){height=80px}|Sistema Eletronico de Informacoes - ME              |
|tjmg   |![tjmg](assets/img/dados_tjmg.jpeg){height=80px}|Tribunal de Justica de Minas Gerais                 |
|tjpe   |![tjpe](assets/img/dados_tjpe.png){height=80px}|Tribunal de Justica de Pernambuco                   |
|tjrs   |![tjrs](assets/img/dados_tjrs.jpg){height=80px}|Tribunal de Justica do Rio Grande do Sul            |
|trf5   |![trf5](assets/img/dados_trf5.jpg){height=80px}|Tribunal Regional Federal 5                         |
|trt    |![trt](assets/img/dados_trt.jpeg){height=80px}|Tribunal Regional do Trabalho 3                     |

Também consideramos Captchas artificiais, criados diretamente no R.

## Captchas artificiais {visibility='`r type`'}

- Facilita testes e simulações
- Evita necessidade de acesso à internet e construção de bases de dados específicas

:::{}

```{r}
#| label: fig-captcha-r-exemplo
#| fig-cap: Exemplo de captcha gerado pela função `captcha::captcha_generate()`
#| out-width: 50%
set.seed(5)
gen <- captcha::captcha_generate()
gen$lab <- NULL
plot(gen)
```   

:::
   
## Para baixar os dados {visibility='`r type`' auto-animate=true}

### Raspagem de dados

```{r}
#| label: fig-fluxo-web-scraping
#| fig-cap: "Ciclo da raspagem de dados. Fonte: [curso de Web Scraping da Curso-R](https://curso-r.github.io/main-web-scraping)."
#| out-width: 80%

knitr::include_graphics("assets/img/cycle.png")
```

- Cada Captcha ganhou uma função `captcha_access()` e outra `captcha_test()`. 
- Códigos disponíveis no pacote [`{captchaDownload}`](https://github.com/jtrecenti/captchaDownload).


## Para baixar os dados {auto-animate=true}

### Raspagem de dados

- Cada Captcha ganhou uma função `captcha_access()` e outra `captcha_test()`. 
- Códigos disponíveis no pacote [`{captchaDownload}`](https://github.com/jtrecenti/captchaDownload).

### Bases disponíveis

- As bases de dados com imagens anotadas foram disponibilizadas na aba de lançamentos (*releases*) do [repositório principal do projeto de pesquisa](https://github.com/decryptr/captcha/releases). 

- As bases e modelos ajustados estão disponíveis para quem tiver interesse em fazer novas pesquisas e utilizar os resultados em suas aplicações.

## Simulação em 3 passos  {visibility='`r type`'}

:::{.columns}
:::{.column width=33% .incremental}
#### 1. Modelo Inicial

__Objetivo__: Obter modelos preditivos de Captchas com diferentes acurácias

- Construção de amostras de dados com subconjuntos das bases completas
- Aplicação modelos com diferentes hiperparâmetros
- Seleção do melhor modelo para cada tamanho de amostra

:::

:::{.column width=33% .incremental}

#### 2. Dados

__Objetivo__: Construir bases de dados utilizando o oráculo

- Filtro de modelos com acurácia entre 5% e 50%
- Coleta de imagens com diferentes quantidades de tentativas (1, 5 e 10)
- Construção de bases de teste

:::

:::{.column width=33% .incremental}

#### 3. Modelo Final

__Objetivo__: Ajustar modelo final para as 65 bases de treino disponíveis

- Modificação da função de perda do modelo
- Busca de hiperparâmetros e ajuste de modelos para cada base de dados
- Comparação de acurácias iniciais e finais

:::

:::

## Simulação em 3 passos

<br/><br/>

:::{.columns}
:::{.column width=33% .incremental}

#### 1. Modelo Inicial

Obter modelos preditivos de Captchas com diferentes acurácias

:::

:::{.column width=33% .incremental}

#### 2. Dados

Construir bases de dados utilizando o oráculo

:::

:::{.column width=33% .incremental}

#### 3. Modelo Final

Ajustar modelo final para as bases de treino construídas

:::

:::

<hr/>

<br/>

### Experimentos adicionais

- Aplicação __iterada__ do WAWL para verificar melhorias
- __Aprendizado online__: download de dados dentro do *minibatch*


# Resultados {background-image="./assets/img/dados_tjmg.jpeg" background-size="200px" background-repeat="repeat" background-opacity="0.1" visibility='uncounted'}


## Resultado geral {visibility='`r type`'}

```{r}
#| echo: false
total_sim <- doutorado::da_results_simulacao |> 
  dplyr::distinct(captcha, n, ntry) |> 
  nrow()

ganho_medio <- doutorado::da_results_simulacao |> 
  dplyr::select(-model) |> 
  tidyr::pivot_wider(names_from = fase, values_from = acc) |> 
  with(mean(oraculo / inicial)) |> 
  scales::percent()

ganho_absoluto <- doutorado::da_results_simulacao |> 
  dplyr::select(-model) |> 
  tidyr::pivot_wider(names_from = fase, values_from = acc) |> 
  with(mean(oraculo - inicial)) |> 
  scales::percent()
```

- Total de simulações[^1]: `r total_sim`
- Variação: tipo de Captcha, acurácia do modelo inicial, tentativas no oráculo

- __Ganho médio__: `r ganho_medio`: mais de 3 vezes a acurácia do modelo inicial.
- __Ganho absoluto__: `r ganho_absoluto`. Aumento médio na acurácia de 33%.

[^1]: Base de dados: [Repositório da tese](https://github.com/jtrecenti/doutorado). Contém: Captcha ajustado, observações do modelo inicial, tentativas do oráculo, etapa de simulação, caminho do modelo ajustado, acurácia obtida

## Resultados do WAWL

Ganho relativo maior que 3x; ganho absoluto de 33%.

```{r}
#| label: fig-simulacao-captcha
#| fig-width: 8
#| fig-height: 5
#| out-width: 100%
#| fig-cap: "Resultados da simulação por captcha, quantidade de tentativas e modelo inicial."

doutorado::da_results_simulacao |>
  dplyr::select(-model) |>
  dplyr::mutate(ntry2 = dplyr::case_when(
    ntry == "01" ~ "Apenas 1",
    TRUE ~ "Mais de 1"
  )) |>
  tidyr::pivot_wider(names_from = fase, values_from = acc) |> 
  dplyr::group_by(captcha, ntry) |> 
  dplyr::mutate(inicial_cut = cut(
    inicial, c(0, .1, .35, .6),
    labels = c("Até 10%", "Entre 10% e 35%", "Mais de 35%")
  )) |> 
  dplyr::rename(wawl = oraculo) |> 
  tidyr::pivot_longer(
    c(inicial, wawl), 
    names_to = "fase", 
    values_to = "acc"
  ) |> 
  ggplot2::ggplot(ggplot2::aes(
    x = fase, y = acc,
    colour = inicial_cut,
    linetype = ntry2,
    group = paste(captcha, n, ntry))
  ) +
  ggplot2::geom_point() +
  ggplot2::geom_line() +
  ggplot2::scale_colour_viridis_d(begin = .2, end = .8, option = "A") +
  ggplot2::scale_y_continuous(labels = scales::percent) +
  ggplot2::facet_wrap(~captcha) +
  ggthemes::theme_hc(base_size = 13) +
  ggplot2::labs(
    x = "Técnica",
    y = "Acurácia",
    colour = "Modelo inicial",
    linetype = "# Tentativas"
  ) +
  ggplot2::theme(
    legend.position = "right"
  )
```

## Aplicação iterada

A utilização da técnica levou o modelo a uma acurácia de 100%.

```{r}
#| label: fig-aplicacao-iterada
#| fig-cap: "Resultados da aplicação iterativa do WAWL"
#| fig-width: 7
#| fig-height: 4
#| out-width: 85%

dados_iteracao_trf5 <- tibble::tribble(
  ~n, ~ntry,         ~tempo,              ~acc,
  "00101",  "01",    "acc_antes", 0.238095238095238,
  "00101",  "01", "acc_oraculo1",             0.705,
  "00101",  "01", "acc_oraculo2",                 1
)

dados_iteracao_trf5 |> 
  ggplot2::ggplot(ggplot2::aes(x = tempo, y = acc)) +
  ggplot2::geom_col(fill = viridis::viridis(2,.9,.3,.7,1,"A")[1], width = .5) +
  ggplot2::scale_y_continuous(labels = scales::percent) +
  ggplot2::scale_x_discrete(
    labels = c(
      "Modelo Inicial\n(n=100)", 
      "Primeira iteração\ndo WAWL\n(n=1000)", 
      "Segunda iteração\ndo WAWL\n(n=2000)"
    )
  ) +
  ggplot2::labs(
    x = "",
    y = "Acurácia"
  ) +
  ggplot2::theme_minimal(14)

```

O resultado sugere que o método WAWL pode ser aplicado iterativamente para aprimorar o aprendizado do modelo.

## Aprendizado online

A partir do modelo inicial 11% de acurácia. 

```{r}
#| label: fig-online-learning
#| fig-cap: "Resultados do experimento com aprendizado online"
#| fig-width: 7
#| fig-height: 4
#| out-width: 80%
doutorado::da_online |> 
  ggplot2::ggplot() +
  ggplot2::aes(x = epoch, y = captcha.acc) +
  ggplot2::geom_hline(
    yintercept = max(doutorado::da_online$captcha.acc),
    colour = "purple", linetype = 2
  ) +
  ggplot2::geom_line(linewidth = 1.3) +
  ggplot2::geom_point(alpha = .8) +
  ggthemes::theme_hc(14) +
  ggplot2::scale_y_continuous(labels = scales::percent, limits = c(0,1)) +
  ggplot2::scale_x_continuous(limits = c(0, 104)) +
  ggplot2::labs(x = "Época", y = "Acurácia") +
  ggplot2::annotate(
    "text",
    x = 100,
    y = max(doutorado::da_online$captcha.acc),
    label = scales::percent(max(doutorado::da_online$captcha.acc)),
    vjust = -.4,
    hjust = -.1,
    size = 5.7,
    colour = "purple"
  )
```

Após 100 épocas, o modelo baixou 6391 imagens e chegou em uma acurácia de 87% na base de teste.  

:::{.notes}

- Integração direta da raspagem de dados no ciclo de aprendizagem
- Modelo, função de perda e base de testes idênticos à simulação completa
- Minibatch construído baixando dados diretamente da internet
- Probabilidade de 80% para baixar novos casos
- Minibatch de 40 observações
- Época definida como 2 minibatches

:::

## Conclusões sobre o Método WAWL {visibility='`r type`'}

- Resultados expressivos e consistentes
- Aproveita oportunidade de feedback oráculo múltiplo
- Aplicação possível para modelos iniciais fracos (acurácia até 10%)
- Factível para bases pequenas ou modelos generalistas


## Pacote `{captcha}`

![](assets/img/diagram.png){fig-align="center"}

- Pacote submetido ao __Journal of Open Source Software (JOSS)__.
- Atualmente, é uma revista conceito B1 no sistema Sucupira (CAPES).
- No momento, [estão avaliando se o tema está dentro do escopo da revista](https://github.com/openjournals/joss-reviews/issues/5286).

# Conclusões {background-image="./assets/img/dados_tjmg.jpeg" background-size="200px" background-repeat="repeat" background-opacity="0.1" visibility="uncounted"}

## Principais avanços {.center}

:::{.columns}
:::{.column width=30%}

#### Pesquisa bibliográfica

- Histórico dos Captchas
- Uso em serviços públicos
- Incentivo para mão de obra precária
- Estado da arte na parte estatística

:::
:::{.column width=30%}

#### Avanço metodológico

- Método WAWL
- Raspagem de dados
- Aprendizado estatístico com rótulos parciais
- Aumento de acurácia sem anotação manual

:::
:::{.column width=30%}

#### Resultados empíricos

- Acurácia do modelo aumentada em 3x
- Possibilidade de aplicação iterada para maior poder preditivo
- Possibilidade de aplicação de aprendizado online

:::
:::

## Principais contribuições {visibility='`r type`'}

::: {.columns}

::: {.column width=33%}
#### Pesquisa acadêmica

- Aprendizado com rótulos parciais
- Raspagem de dados em estatística
- Exploração de oráculos
:::

::: {.column width=33%}

#### Comunidade de programação

- Pacote `{captcha}`
- Disponibilização de dados e modelos

:::

::: {.column width=33%}
#### Sociedade em geral

- Quebra de incentivo nefasto
- Possibilitar novas pesquisas
:::

:::

## Próximos passos

### Aprimoramentos

- Resultados matemáticos mais robustos
- Aprofundamento dos estudos de aplicação iterada e aprendizado online

### Extensões

- Modelo geral de resolução de Captchas 
- Integração com GPT-4?


# Obrigado!

:::{.walle}
![](assets/img/walle.gif)
:::

## Referências usadas na apresentação {visibility='uncounted'}

::: {#refs}
:::

<hr/>

:::{.footnote}

Para uma lista completa de referências, ver o [repositório da tese](https://jtrecenti.github.io/doutorado/bibliografia.html).

:::
