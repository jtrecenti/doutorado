[["index.html", "Doutorado Capítulo 1 Sobre este documento", " Doutorado Julio Trecenti 20 de May de 2021 Capítulo 1 Sobre este documento "],["introducao.html", "Capítulo 2 Introdução 2.1 Objetivos 2.2 Justificativa 2.3 Hipóteses 2.4 Organização do trabalho", " Capítulo 2 Introdução 2.1 Objetivos Construir um repositório de dados e um app de anotação Propor uma solução inovadora usando oráculos Desenvolver um pacote computacional aberto 2.2 Justificativa Citar as notícias do Serpro, STF, TJRS argumentar que os captchas baseados em texto são um risco e devem deixar de existir concluir que o futuro será de recaptchas avançados e impossíveis ou de dados abertos (essa parte é importante pois é a justificativa do projeto) 2.3 Hipóteses Oráculo pode ajudar, e abrir isso em sub hipóteses 2.4 Organização do trabalho "],["captchas.html", "Capítulo 3 Captchas", " Capítulo 3 Captchas contar a história dos captchas como uma luta de classes: geradores e classificadores na história, ir citando os papers que vão aparecendo o advento do recaptcha quando surgir o primeiro classificador com convnets, definir de forma mais detalhada quando surgir o primeiro classificador com GAN, definir de forma mais detalhada "],["dados.html", "Capítulo 4 Dados", " Capítulo 4 Dados Critérios para entrar ou sair da base Lista e caracterização dos captchas Repositório de dados Contribuições da comunidade App {ancaptcha} \\[\\newcommand{\\x}{\\mathbf{x}} \\newcommand{\\X}{\\mathbf{X}} \\renewcommand{\\s}{\\mathbf{s}} \\renewcommand{\\S}{\\mathbf{S}} \\renewcommand{\\Z}{\\mathbf{Z}} \\renewcommand{\\z}{\\mathbf{z}} \\newcommand{\\w}{\\mathbf{w}} \\renewcommand{\\P}{\\mathbb{P}} \\renewcommand{\\tt}{\\boldsymbol{\\theta}}\\] "],["modelo.html", "Capítulo 5 Modelagem 5.1 Construção dos dados 5.2 Modelagem usando heurísticas 5.3 Modelagem usando verossimilhança 5.4 Implementação", " Capítulo 5 Modelagem Para este trabalho, desenvolvemos uma técnica inovadora para resolver Captchas sem a necessidade de feedback humano. A solução envolve avanços em duas direções: engenharia e modelagem. 5.1 Construção dos dados Na parte de engenharia, desenvolvemos uma técnica para capturar e anotar feedbacks automatizados do oráculo no preenchimento de Captchas. A técnica consiste em três passos: Desenvolver um robô que acessa o site desejado e tenta acessar uma informação que exige preenchimento de Captcha. A partir de um modelo estatístico inicial, o robô tenta preencher o Captcha automaticamente, submetendo para avaliação do site. Se o Captcha for verificado pelo site como correto, anotamos o caminho da imagem com o valor “1”. Se estiver incorreto, anotamos o caminho da imagem com o valor “0”. O procedimento descrito pode ser reproduzindo indefinidamente. Isso significa que podemos criar uma base de dados virtualmente infinita de Captchas rotulados, com a informação adicional do rótulo estar correto ou incorreto. Fizemos isso para todos os Captchas presentes em nossa base de dados. Um problema prático do oráculo é sua propriedade de memória. Em problemas reais, não é possível testar diferentes rótulos para a mesma imagem, o que inviabiliza o uso de técnicas de força bruta na resolução de Captchas. Outro problema é que a informação adicional recebida quando o modelo erra é incompleta. A única informação nova que temos é que o rótulo testado está incorreto, dentre todos os rótulos possíveis daquela imagem. Como temos uma grande quantidade de rótulos possíveis em um Captcha, muitas vezes na ordem de milhões, o feedback do oráculo pode ser considerado fraco. Uma possível abordagem para lidar com o segundo problema seria simplesmente descartar os Captchas classificados incorretamente. Podemos criar uma base de dados (virtualmente infinita) somente com os rótulos corretos e ajustar um novo modelo. Essa abordagem, no entanto, tem sérios problemas, já que considera somente os casos em que o classificador já funciona bem. Nosso objetivo é melhorar o modelo justamente nos casos em que o oráculo acusa erros. Fizemos isso de duas formas. 5.2 Modelagem usando heurísticas O fato da informação ser incompleta e fraca não significa que ela é inútil. Os Captchas que estamos trabalhando possuem várias letras geradas de forma independente, fazendo com que um classificador \\(g\\) seja na verdade um classificador multivariado: \\[\\begin{align*} g(\\X) = (g(\\X)_1, g(\\X)_2, \\dots, g(\\X)_k), \\end{align*}\\] sendo \\(k\\) o número de letras do Captcha. Supondo que o classificador é igualmente poderoso para todas as posições das letras, temos que \\[\\begin{align*} p = \\P(g(\\X) = Y) = \\P(g(\\X)_1 = Y_1)^k = p_{1}^k \\end{align*}.\\] Seja \\(N\\) a quantidade de acertos de \\(g(\\X)\\). Sabemos que \\(N\\sim \\text{Bin}(k, p_{1})\\). Então, quando o oráculo acusa que o modelo errou, a probabilidade do modelo ter errado somente uma letra é \\[\\begin{align*} \\P(\\text{errei uma letra}\\;|\\;\\text{errei}) &amp;= \\P(N=k-1|N\\neq k) \\\\ &amp;= \\frac{(k-1) p_{1}^{k-1} (1-p_{1})}{1-p_1^k} \\end{align*}\\] A Figura 5.1 mostra as probabilidades da equação acima graficamente, considerando \\(k=5\\). Como vimos, é razoável admitir que um modelo inicial teria pelo menos 80% de acurácia para uma letra específica. Nessas condições, quando o oráculo dá um feedback negativo, a probabilidade do modelo ter errado somente uma letra do Captcha é próxima a 50%. Figura 5.1: Probabilidade do modelo ter errado somente uma letra, a partir de um feedback negativo do oráculo. Considerando um captcha de 5 letras. As intuições apresentadas sugerem duas possibilidades. Por um lado, podemos pensar em uma estratégia para corrigir os dados a partir do feedback do usuário e das probabilidades reportadas pelo modelo de classificação. Chamaremos uma estratégia desse tipo de heurística. Definir as heurísticas possíveis 5.2.1 Propriedades da estratégia demonstração izbicki 5.2.2 Resultados empíricos resultados dos modelos aplicados nos dados 5.3 Modelagem usando verossimilhança Assim como na área de análise de sobrevivência, podemos pensar a informação do oráculo como um problema de dados censurados. Quando o modelo acerta, temos uma observação completa. Quando o modelo erra, temos a informação de que o rótulo testado está incorreto. Seja \\(z_i\\) o indicador fornecido pelo oráculo de que o rótulo está correto. A verossimilhança do modelo é dada por \\[ \\mathcal L(\\tt;\\mathbf y,\\mathbf z)=\\prod_i \\P(Y=y|\\tt)^{z_i}\\P(Y\\neq y|\\tt)^{1-z_i}. \\] A partir da construção da base definida na Seção 5.1, podemos ajustar um novo modelo com a base completa, modificando a função de perda para acomodar os dados censurados. A vantagem da modelagem usando a verossimilhança com dados censurados é que ela considera exatamente a informação que é dada pelo oráculo. Isso evita os potenciais problemas na abordagem via heurísticas, já que em nenhum momento o modelo receberá dados com erros de medição. A técnica, no entanto, apresenta duas desvantagens. A primeira é que não existem garantias teóricas de que a técnica produz um classificador melhor que a versão inicial. Diferentemente das suposições comuns em análise de sobrevivência, o mecanismo gerador da censura no nosso caso não é aleatório, já que o gerador de observações censuradas é a função de predição do modelo. Assim, não podemos importar os resultados da área de análise de sobrevivência diretamente. A segunda é de ordem prática. Como a solução envolve modificações na função de perda, ele não é diretamente adaptável a qualquer modelo estatístico para ajustar os dados de Captchas, precisando ser implementado caso a caso. 5.3.1 Resultados empíricos resultados dos modelos aplicados nos dados 5.4 Implementação Conclusão sobre quais são os melhores métodos comentários adicionais sobre como utilizar descrição do pacote a documentação completa do pacote será um apêndice "],["conclusao.html", "Capítulo 6 Conclusões", " Capítulo 6 Conclusões Concluir sobre a parte mais política (captchas e dados abertos etc) Concluir sobre o avanço científico na modelagem estatística Reforçar a contribuição técnica para a comunidade com o pacote e o app "],["pacote-captcha.html", "A Pacote {captcha}", " A Pacote {captcha} Citar versão anterior {decryptr} Funções do {captcha} Print screens do {ancaptcha} "]]
